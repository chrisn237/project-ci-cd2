name: CI/CD Pipeline for Staging Deployment

on:
  push:
    branches:
      - main  # La pipeline s'exécute sur chaque push dans la branche `main`

jobs:
  build_test_deploy:
    runs-on: ubuntu-latest

    env:
      # Variables d'environnement pour la base de données et Docker
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      STAGING_VM_IP: ${{ secrets.STAGING_VM_IP }}
      STAGING_VM_USER: ${{ secrets.STAGING_VM_USER }}
      STAGING_VM_PASSWORD: ${{ secrets.STAGING_VM_PASSWORD }}

    steps:
      # Étape 1 : Récupération du code source
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 2 : Remplacement des placeholders dans database.ini avec les variables d'environnement
      - name: Replace database.ini placeholders with environment variables
        run: |
          sed -i "s/__DB_HOST__/$DB_HOST/g" project/db/resources/database.ini
          sed -i "s/__DB_PORT__/$DB_PORT/g" project/db/resources/database.ini
          sed -i "s/__DB_USER__/$DB_USER/g" project/db/resources/database.ini
          sed -i "s/__DB_PASSWORD__/$DB_PASSWORD/g" project/db/resources/database.ini
          sed -i "s/__DB_NAME__/$DB_NAME/g" project/db/resources/database.ini

      # Étape 3 : Construction et Push de l'image Docker
      - name: Build and Push Docker image
        run: |
          docker build -t $DOCKER_USERNAME/apptest1:latest .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_USERNAME/apptest1:latest

      # Étape 4 : Déploiement sur la VM de staging
      - name: Deploy to Staging VM 
        run: |
          # Exportation des variables d'environnement pour SSH
          export LC_DB_HOST=$DB_HOST
          export LC_DB_PORT=$DB_PORT
          export LC_DB_USER=$DB_USER
          export LC_DB_PASSWORD=$DB_PASSWORD
          export LC_DB_NAME=$DB_NAME
          export LC_DOCKER_USERNAME=$DOCKER_USERNAME
          
          # Exécution du script de déploiement sur la VM
          sshpass -p "$STAGING_VM_PASSWORD" ssh -o StrictHostKeyChecking=no $STAGING_VM_USER@$STAGING_VM_IP << EOF
            docker pull $DOCKER_USERNAME/apptest1:latest
            docker stop staging-container || true
            docker rm staging-container || true
            docker run -d --name staging-container \
              -e DB_HOST=\$LC_DB_HOST \
              -e DB_PORT=\$LC_DB_PORT \
              -e DB_USER=\$LC_DB_USER \
              -e DB_PASSWORD=\$LC_DB_PASSWORD \
              -e DB_NAME=\$LC_DB_NAME \
              -p 8088:8088 \
              $DOCKER_USERNAME/apptest1:latest
          EOF 
